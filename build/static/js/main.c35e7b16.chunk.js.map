{"version":3,"sources":["components/ui/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","Navbar_default","expand","className","Navbar","href","aria-controls","id","Nav_default","Nav","App","type","aria-describedby","placeholder","rows","data-gramm","data-txt_gramm_id","data-gramm_id","data-gramm_editor","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAIeA,EAAA,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,OAAO,KAAKC,UAAU,eAC5BL,EAAAC,EAAAC,cAACI,EAAA,MAAD,CAAOC,KAAK,SAAZ,uCACAP,EAAAC,EAAAC,cAACI,EAAA,OAAD,CAAQE,gBAAc,qBACtBR,EAAAC,EAAAC,cAACI,EAAA,SAAD,CAAUG,GAAG,oBACXT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAKI,UAAU,WACbL,EAAAC,EAAAC,cAACS,EAAA,KAAD,CAAMJ,KAAK,sDAAX,iBC0DKK,mLAhEX,OACEZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACJ,EAAD,MACAE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oBACbL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,mBACdL,EAAAC,EAAAC,cAAA,oDACAF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACbL,EAAAC,EAAAC,cAAA,SACEW,KAAK,OACLR,UAAU,eACVI,GAAG,QACHK,mBAAiB,QACjBC,YAAY,uBAGdf,EAAAC,EAAAC,cAAA,SACEW,KAAK,OACLR,UAAU,eACVI,GAAG,SACHO,KAAK,IACLC,aAAW,OACXC,oBAAkB,uCAClBC,gBAAc,uCACdC,oBAAkB,OAClBL,YAAY,gCAGhBf,EAAAC,EAAAC,cAAA,UACEW,KAAK,SACLR,UAAU,oCAFZ,aASNL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,cACZL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,uDACZL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,SAAlB,SAEAL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UAAf,iBAEAL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAA,UAAQW,KAAK,SAASR,UAAU,mBAAhC,WAGAL,EAAAC,EAAAC,cAAA,UAAQW,KAAK,SAASR,UAAU,kBAAhC,yBApDFgB,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c35e7b16.chunk.js","sourcesContent":["import React from 'react'\nimport Navbar, { Brand, Toggle, Collapse } from 'react-bootstrap/Navbar'\nimport Nav, { Link } from 'react-bootstrap/Nav'\n\nexport default props => (\n  <header>\n    <Navbar expand=\"lg\" className=\"navbar-dark\">\n      <Brand href=\"#home\">Laboration 2: JavaScript/React/AJAX</Brand>\n      <Toggle aria-controls=\"basic-navbar-nav\" />\n      <Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Link href=\"https://www.forverkliga.se/JavaScript/api/crud.php\">\n            API Docs\n          </Link>\n        </Nav>\n      </Collapse>\n    </Navbar>\n  </header>\n)\n","import React, { Component } from 'react'\nimport Header from './components/ui/Header/Header'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"container\">\n          <div className=\"row form-section\">\n            <form className=\"book-form col-6\">\n              <legend>Lägg till dina favoritböcker</legend>\n              <div className=\"form-group\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"title\"\n                  aria-describedby=\"title\"\n                  placeholder=\"Lägg till titel\"\n                />\n\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"author\"\n                  rows=\"3\"\n                  data-gramm=\"true\"\n                  data-txt_gramm_id=\"63b74fb6-c7e4-7f0e-0c1f-438d47ac87a0\"\n                  data-gramm_id=\"63b74fb6-c7e4-7f0e-0c1f-438d47ac87a0\"\n                  data-gramm_editor=\"true\"\n                  placeholder=\"Lägg till författare\"\n                />\n              </div>\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary btn-lg btn-block\"\n              >\n                Skicka\n              </button>\n            </form>\n          </div>\n        </div>\n        <div className=\"display-books\">\n          <div className=\"container\">\n            <div className=\"col-12\">\n              <ul className=\"list-group\">\n                <li className=\"list-item list-group-item d-flex align-items-center\">\n                  <strong className=\"title\">Titel</strong>\n\n                  <div className=\"author\">Författare</div>\n\n                  <div className=\"buttons\">\n                    <button type=\"button\" className=\"btn btn-success\">\n                      Editera\n                    </button>\n                    <button type=\"button\" className=\"btn btn-danger\">\n                      Ta bort\n                    </button>\n                  </div>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/bootstrap.min.css'\nimport './css/index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}